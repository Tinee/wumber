AWSTemplateFormatVersion: '2010-09-09'
Description: 'Wumber, serverless score tracking.

  '
Globals:
  Function:
    Environment:
      Variables:
        ENVIRONMENT:
          Fn::Sub: ${Environment}
        REGION:
          Fn::Sub: ${AWS::Region}
        WUMBER_TABLE:
          Ref: WumberTable
    MemorySize: 128
    Runtime: go1.x
    Tags:
      AppName:
        Ref: ProjectName
    Timeout: 15
    Tracing: Active
Outputs:
  WumberBooksAPI:
    Description: API endpoint URL for Prod environment
    Value:
      Fn::Sub: https://${WumberAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/
Parameters:
  Environment:
    AllowedValues:
    - prod
    - uat
    Default: uat
    Description: Please specify the enviroment.
    Type: String
  ProjectName:
    Description: Please the name of the project.
    Type: String
Resources:
  ApiGatewayAuthorizerRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeAsync
            - lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::Sub: ${JWTAuthFunction.Arn}
          Version: '2012-10-17'
        PolicyName: InvokeAuthorizerFunction
    Type: AWS::IAM::Role
  CreateWorkspaceFunction:
    Properties:
      CodeUri: s3://wumber/0d2d61f2f37fce015a7df4b65a87530d
      Description: Attempts to create a Workspace in the database, fails if it already
        exists.
      Events:
        CatchAll:
          Properties:
            Method: POST
            Path: /workspace
            RestApiId:
              Ref: WumberAPI
          Type: Api
      Handler: create-workspace
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: WumberTable
      Runtime: go1.x
      Tags:
        API: Workspace
      Tracing: Active
    Type: AWS::Serverless::Function
  JWTAuthFunction:
    Properties:
      CodeUri: s3://wumber/0d2d61f2f37fce015a7df4b65a87530d
      Description: Validates the JWT that sends up in the Authorization header, also
        passes down the userID as the principalId.
      Handler: jwt-auth
      Runtime: go1.x
      Tracing: Active
    Type: AWS::Serverless::Function
  RegisterUserFunction:
    Properties:
      CodeUri: s3://wumber/0d2d61f2f37fce015a7df4b65a87530d
      Description: Attempts to register a user, it'll fail if the email already exists.
      Events:
        CatchAll:
          Properties:
            Auth:
              Authorizer: NONE
            Method: POST
            Path: /user
            RestApiId:
              Ref: WumberAPI
          Type: Api
      Handler: user-register
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: WumberTable
      Runtime: go1.x
      Tags:
        API: User
      Tracing: Active
    Type: AWS::Serverless::Function
  WumberAPI:
    Properties:
      Auth:
        Authorizers:
          TestAuthorizer:
            FunctionArn:
              Fn::GetAtt:
              - JWTAuthFunction
              - Arn
            FunctionPayloadType: TOKEN
            Identity:
              ReauthorizeEvery: 30
        DefaultAuthorizer: TestAuthorizer
      Cors:
        AllowHeaders: '''*'''
        AllowMethods: '''*'''
        AllowOrigin: '''*'''
      StageName: Prod
    Type: AWS::Serverless::Api
  WumberTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      TableName:
        Fn::Sub: ${ProjectName}-${Environment}-Wumber
    Type: AWS::DynamoDB::Table
Transform: AWS::Serverless-2016-10-31
