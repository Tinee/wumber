AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Wumber, serverless score tracking.

Globals:
  Function:
    Timeout: 15
    Runtime: go1.x
    Tracing: Active
    MemorySize: 128
    Environment:
      Variables:
        WUMBER_TABLE: !Ref WumberTable
        ENVIRONMENT: !Sub ${Environment}
        USER_TOPIC: !Ref WumberUserTopic
    Tags:
      AppName: !Ref ProjectName

Parameters:

  Environment: 
    Type: String
    Default: uat
    AllowedValues: 
      - prod
      - uat
    Description: Please specify the enviroment.

  MixpanelToken: 
    Type: String
    NoEcho: true
    Description: Please specify the enviroment.

  ProjectName:
    Type: String
    Description: Please the name of the project.
  
Resources:
  ApiGatewayAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - sts:AssumeRole
      Policies: 
        - PolicyName: "InvokeAuthorizerFunction"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: !Sub ${JWTAuthFunction.Arn}

  WumberAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"  
      Auth:
        DefaultAuthorizer: TestAuthorizer
        Authorizers:
          TestAuthorizer:
            FunctionPayloadType: TOKEN
            FunctionArn: !GetAtt JWTAuthFunction.Arn
            Identity:
              ReauthorizeEvery: 30

  JWTAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Validates the JWT that sends up in the Authorization header, also passes down the userID as the principalId.
      CodeUri: bin/
      Handler: jwt-auth
      Runtime: go1.x
      Tracing: Active
          
  CreateWorkspaceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Attempts to create a Workspace in the database, fails if it already exists.
      CodeUri: bin/
      Handler: create-workspace
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WumberTable
      Runtime: go1.x
      Tracing: Active
      Tags:
        API: Workspace
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /workspace
            Method: POST
            RestApiId:
              Ref: WumberAPI

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Attempts to register a user, it'll fail if the email already exists.
      CodeUri: bin/
      Handler: user-register
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WumberTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt WumberUserTopic.TopicName
      Runtime: go1.x
      Tracing: Active
      Tags:
        API: User
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /user
            Method: POST
            RestApiId:
              Ref: WumberAPI
            Auth:
              Authorizer: NONE

  MixpanelUserRegisterTrackingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: When a user register we want to track that in Mixpanel. 
      CodeUri: bin/
      Handler: mixpanel-user-register
      Runtime: go1.x
      Tracing: Active
      Environment:
        Variables:
          MIXPANEL_TOKEN: !Ref MixpanelToken
      Events:
        Queue:
          Type: SQS
          Properties:
            Queue: !GetAtt WumberUserCreatedQueue.Arn
            BatchSize: 10

  WumberTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ProjectName}-${Environment}-Wumber
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE


  WumberUserCreatedQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 #14 days
      QueueName: !Sub ${Environment}-${ProjectName}-user-created-queue
      VisibilityTimeout: 30
      Tags:
        - Key: AppName
          Value: !Ref ProjectName

  WumberUserTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: !Sub ${Environment}-${ProjectName}-user-topic

  WumberUserTopicSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref WumberUserTopic
      Endpoint: !GetAtt WumberUserCreatedQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true
      FilterPolicy:
          action:
            - created
  WumberSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Sid: MySQSPolicy001
            Effect: Allow
            Principal: "*"
            Action: sqs:SendMessage
            Resource: !GetAtt WumberUserCreatedQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref WumberUserTopic
      Queues:
        - !Ref WumberUserCreatedQueue

Outputs:
  WumberBooksAPI:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub 'https://${WumberAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'
