AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Wumber, serverless score tracking.

Globals:
  Function:
    Timeout: 15
    Runtime: go1.x
    Tracing: Active
    MemorySize: 128
    Environment:
      Variables:
        WORKSPACE_TABLE: !Ref WorkspaceTable
        REGION: !Sub ${AWS::Region}
    Tags:
      AppName: 
        Ref: ProjectName

Parameters:

  Enviroment: 
    Type: String
    Default: uat
    AllowedValues: 
      - prod
      - uat
    Description: Please specify the enviroment.

  ProjectName:
    Type: String
    Description: Please the name of the project.
  
Resources:

  ApiGatewayAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - sts:AssumeRole
      Policies: 
        - PolicyName: "InvokeAuthorizerFunction"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: !Sub ${JWTAuthFunction.Arn}

  WumberAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"  
      Auth:
        DefaultAuthorizer: TestAuthorizer
        Authorizers:
          TestAuthorizer:
            FunctionPayloadType: TOKEN
            FunctionArn: !GetAtt JWTAuthFunction.Arn
            Identity:
              # Headers: Authorization
              # ValidationExpression: ^Bearer [-0-9a-zA-Z\._]*$
              ReauthorizeEvery: 30 # seconds

  JWTAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Testing
      CodeUri: bin/
      Handler: jwt-auth
      Runtime: go1.x
      Tracing: Active
          
  CreateWorkspaceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Attempts to create a Workspace in the database, fails if it already exists.
      CodeUri: bin/
      Handler: create-workspace
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WorkspaceTable
      Runtime: go1.x
      Tracing: Active
      Tags:
        API: Workspace
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /workspace
            Method: POST
            RestApiId:
              Ref: WumberAPI

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Attempts to register a user, it'll fail if the email already exists.
      CodeUri: bin/
      Handler: user-register
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WorkspaceTable
      Runtime: go1.x
      Tracing: Active
      Tags:
        API: User
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /user
            Method: POST
            RestApiId:
              Ref: WumberAPI
            Auth:
              Authorizer: NONE

  WorkspaceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Sub ${ProjectName}-${Enviroment}-WorkspaceTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE

  WumberUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      EmailVerificationMessage: 'Please click the link below to verify your email address. {####} '
      EmailVerificationSubject: Your verification link
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: true
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          RequireLowercase: false
          RequireSymbols: false
          RequireNumbers: true
          MinimumLength: 8
          RequireUppercase: true
      UserPoolTags:
        AppName: 
          Ref: ProjectName
          
  WumberUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Description: "App Client to the frontend."
    Properties:
      ClientName: !Sub ${ProjectName}-${Enviroment}-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
      UserPoolId:
        Ref: WumberUserPool


Outputs:
  WumberBooksAPI:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub 'https://${WumberAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/'

  CognitoURL:
    Description: "API endpoint URL for Prod environment"
    Value: !GetAtt WumberUserPool.ProviderURL

    